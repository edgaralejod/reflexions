What happens when you initialize a repository? 
Why do you need to do it?

When you initialize a repository git software creates all the 
necessary files and file structures needed to keep track of the
files residing in that repository. This is necessary because 
this structure is necessary to use git.

How is the staging area different from the working directory and
the repository? What value does it offer?

The staging area is a middle ground between the working directory 
and the repository. It allows control of which of the files
in the working repository should be added to the new commit.

How can you use the staging area to make sure you have
one commit per logical change?

by staging files just when the file changed in such a way
that it requires commitment.

What are some situations when branches would be helpful in 
keeping your history organized? How would branches 
help?

When new ideas or new experiments would like to be tried. 
Branching allows to make modifications in parallel with 
a known working code at certain point in time.

How do the diagramas help you visualize the branch structure?

Diagrams allow to graphically observe the parents of every commit. 
This can be helpful to find branches that are not reacheble.

What is the result of merging two branches together? Why do we
represent it in the diagram the way we do?

The result of merging to branches is a unified file that has
the changes introduced in both branches to all the files that
are being tracked by the system. The diagram just presents exactly
what happens that is creating a single path from two different 
branches.

What are the pros and cons of Git's automatic merging vs. always doing
merges manually?

The pros of automatic merging is that when the developer takes care
of the way he is introducing changes, the system could very easy
take care of merging to branches. The cons can be that if two branches
created to many changes the manual merging could become painful.